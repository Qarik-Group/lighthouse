#!/usr/bin/env bash

STEP() { echo ; echo ; echo "==\\" ; echo "===>" "$@" ; echo "==/" ; echo ; }

# read in configuration variables, when the file exits
# it will not exist in piplines that run containers for example.
[[ -s "config.env" ]] && source "config.env"

bosh_login() {

    ####
    STEP "Logging into bosh."
    ####

    # obtain the bosh CA cert, place in a temp folder, to store in BOSH_CA_CERT.
    mkdir -p /tmp/lh/certs.$$
    safe get ${VAULT_PATH}/bosh/ssl/ca:certificate > /tmp/lh/certs.$$/bosh-ssl.crt

    # environment variables for BOSH needed to login.

    BOSH_ENVIRONMENT="${BOSH_ENVIRONMENT}"
    BOSH_IP="${BOSH_IP}"
    BOSH_CA_CERT=/tmp/lh/certs.$$/bosh-ssl.crt
    BOSH_CLIENT="admin"
    BOSH_CLIENT_SECRET=$(safe get ${VAULT_PATH}/bosh/users/admin:password)

    # Create an alias

    bosh alias-env ${BOSH_ENVIRONMENT} -e ${BOSH_IP} --ca-cert ${BOSH_CA_CERT}

    # Log into the BOSH_ENVIRONMENT

    bosh login -e ${BOSH_ENVIRONMENT} --client=${BOSH_CLIENT} --client-secret=${BOSH_CLIENT_SECRET}

}

bosh_logout() {

    ####
    STEP "Logged out of bosh."
    ####

    bosh logout -e ${BOSH_ENVIRONMENT}

    # remove the cert we've got, in case we're going to target a new director
    rm -rf /tmp/lh/certs.*

}

bosh_tests() {

    ####
    STEP "Running BOSH tests."
    ####

    . tests/bosh/included

}

cf_login() {

    ####
    STEP "Logging into cf."
    ####

    # environment variables for Cloud Foundry needed to login.

    CF_USERNAME="admin"
    CF_PASSWORD=$(safe get ${VAULT_PATH}/cf/admin_user:password)
    CF_API="$( safe get secret/exodus/${BASE_ENV}/cf:api_url )"

    CF_ORG="system"
    CF_SPACE="dev"

    # Set the API endpoint.

    cf api --skip-ssl-validation "${CF_API}" 

    # Authenticate to CF.

    CF_USERNAME="${CF_USERNAME}" CF_PASSWORD="${CF_PASSWORD}" cf auth

    # Set the default target.

    cf target -o "${CF_ORG}" -s "${CF_SPACE}"

}

cf_logout() {

    ####
    STEP "Logged out of cf."
    ####
    
    cf logout

    cf api --unset

}

cf_tests() {

    ####
    STEP "Running CF tests."
    ####

    . tests/cf/included

}

check_safe() {
    
    ####
    STEP "Checking vault connnection."
    ####

    safe get secret/handshake > /dev/null
    if [[ $? > 0 ]]; then
        echo "There was an error checking safe.  Please ensure your VAULT_ADDR and VAULT_TOKEN are correct."
    fi

}

# loop through the list of required CLI software.

check_dependencies() {
    
    ####
    STEP "Checking software dependencies."
    ####
        
    for command in "jq" "cf" "bosh" "safe" "make"; do
        type ${command} > /dev/null
        if [[ $? > 0 ]]; then
            echo "The ${command} is not found.  Please install before proceeding."
        fi
    done
}

safe_login() {

    ####
    STEP "Logging into safe."
    ####

    safe -k target ${VAULT_ADDR} ${VAULT_ALIAS}
    echo "$VAULT_TOKEN" | safe auth ${SAFE_AUTH}
}

safe_logout() {

    ####
    STEP "Logged out of safe."
    ####

    safe target delete ${VAULT_ALIAS}
}

# top level commands

check() {
    check_dependencies
    check_safe
}

login() {

    safe_login
    bosh_login
    cf_login

    #TODO: ensure that if an error raised in previous functions
    #they will break before this STEP.
    ####
    STEP "Logged into all systems."
    ####

}

logout() {
    safe_logout
    bosh_logout
    cf_logout

    #TODO: ensure that if an error raised in previous functions
    #they will break before this STEP.
    ####
    STEP "Logged out of all systems."
    ####
}

run_test() {
    bosh_tests
    cf_tests
}

run_individual_test() {
    [[ $1 -eq 0 ]] && login
    if [[ -x $2 ]] 
    then
        . $2
    else
        echo "test $2 does not exist or is not executable"
        false
    fi
    exit $?
}

#TODO figure out if we want a more complicated setting
enable_lh_debug() {
    export LH_DEBUG=
}

#TODO figure out if we want a more complicated setting
enable_lh_trace() {
    export LH_TRACE=
}


# teach a man to CLI

check_usage() {
    echo "TODO"
    echo "TODO"
    echo "TODO"
    exit 1
}

login_usage() {
    echo "TODO"
    echo "TODO"
    echo "TODO"
    exit 1
}

logout_usage(){
    echo "TODO"
    echo "TODO"
    echo "TODO"
    exit 1
}

test_usage() {
    echo "       test: run all tests."
    echo "  test bosh: only the bosh tests."
    echo "    test cf: only cloud foundry tests."
    exit 1
}

run_usage() {
    echo "       [path to test]: run this test."
    exit 1
}

usage() {
    echo "Lighthouse: It's clear to come ashore."
    echo "  login  -- sign into vault with safe, then BOSH and CF with vault."
    echo "  logout -- logout of safe, BOSH and CF."
    echo "  check  -- check for dependencies or signed in."
    echo "  test   -- run all tests."
    echo "  run    -- run a single test."
    exit 1
}

if (($# == 0))
then
    usage
    exit 1
fi

# only do what the man says to do
while (($# > 0)) 
do
    case "$1" in
        -d)
            shift
            enable_lh_debug
            ;;
        -t)
            shift
            enable_lh_trace
            ;;

        login)
            shift
            while [[ $# -gt 0 ]]; do
                case "$1" in
                    -h|--help|help)
                        login_usage
                        exit 0
                        ;;            
                    bosh)
                        bosh_login
                        exit 0
                        ;;
                    cf)
                        cf_login
                        exit 0
                        ;;
                    safe)
                        safe_login
                        exit 0
                        ;;
                    *)
                        login_usage
                        exit 0
                        ;;
                esac
                shift
            done
            login "$@"
            ;;
        logout)
            shift
            while [[ $# -gt 0 ]]; do
                case "$1" in
                    -h|--help|help)
                        logout_usage
                        exit 0
                        ;;            
                    bosh)
                        bosh_logout
                        exit 0
                        ;;
                    cf)
                        cf_logout
                        exit 0
                        ;;
                    safe)
                        safe_logout
                        exit 0
                        ;;
                    *)
                        logout_usage
                        exit 0
                        ;;
                esac
                shift
            done
            logout "$@"
            ;;
        test)
            shift
            while [[ $# -gt 0 ]]; do
                case "$1" in
                    -h|--help|help)
                        test_usage
                        exit 0
                        ;;
                    cf)
                        cf_tests
                        exit 0
                        ;;
                    bosh)
                        bosh_tests
                        exit 0
                        ;;
                    *)
                        test_usage
                        exit 0
                        ;;
                esac
                shift
            done
            run_test "$@"
            ;;
        check)
            shift
            while [[ $# -gt 0 ]]; do
                case "$1" in
                    -h|--help|help)
                        check_usage
                        exit 0
                        ;;
                    dependencies)
                        check_dependencies
                        exit 0
                        ;;
                    safe)
                        check_safe
                        exit 0
                        ;;
                    *)
                        check_usage
                        exit 0
                        ;;
                esac
                shift
            done
            check "$@"
            ;;
        run)
            shift
            skip_login=0
            while [[ $# -gt 0 ]]; do
                echo "Running test $1"
                case "$1" in
                    -h|--help|help)
                        run_usage
                        exit 0
                        ;;
                    -s) shift
                        skip_login=1
                        continue
                        ;;
                    *)
                        run_individual_test "${skip_login}" "$1"
                        exit 0
                        ;;
                esac
                shift
            done
            run_usage
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done
