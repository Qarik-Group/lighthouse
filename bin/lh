#!/usr/bin/env bash

# Needed for BASH 5.x extended globbing
shopt -s extglob

(( ${BASH_VERSINFO[0]} > 3 )) || {
  echo -e "Bash version must be  4.X or greater" >&2 && exit 1
}

# NOTE Cannot move into output.h since is it used before LH_DIRECTORY is defined 

step() {
  cat <<EOF

==\\\\
====>  $@
==//

EOF
}

declare inode_list

is_path_in_PATH() {
    declare test_path=${1:?is_path_in_PATH() - no directory given   $(caller 0)}
    [[ ! -d "${test_path}" ]] && return 2 
    read path_inode rest < <(ls -idH "${test_path}") #grr subshells
    echo "${path_inode}"
    [[ ":$PATH:" == *":${test_path}:"* ]]
}

add_lib_paths_to_PATH() {
    declare path path_inode
    for path in "${LH_DIRECTORY}/lib/" "$PWD/lib/" "${USE_ENV}/lib/"
    do
        path_inode=$(is_path_in_PATH "${path}")
        case $? in
            2) continue ;;
            1) [[ :${inode_list}: != *:${path_inode}:* ]] && PATH="${path}:$PATH"
        esac
        inode_list="${path_inode}:${inode_list}"
    done
    return 0
}

initialize_environment() {

  if [[ -z ${LH_DIRECTORY:+is_set_and_not_empty}  ]]
  then
    LH_DIRECTORY=$(dirname $(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd))
  fi

  if [[ ! -r "${LH_DIRECTORY}/lib/output.sh" ]]
  then
    echo "LH_DIRECTORY does not point to the lighthouse directory"
    exit 1
  fi

  . ${LH_DIRECTORY}/lib/output.sh

  add_lib_paths_to_PATH
}

# Beginning of function definitions

# TODO Do we leave these arrays here or move it to the config file?
# TBD Do we leave these arrays here or move it to the config file?

declare -A variables=( 
  [BOSH_CA_CERT]="required"
  [BOSH_CLIENT]="required"
  [BOSH_CLIENT_SECRET]="required"
  [CF_API]="required"
  [CF_SKIP_SSL_VALIDATION]="optional"
  [CF_ORG]="required"
  [CF_SPACE]="required" 
  [CF_PASSWORD]="required"
  [CF_USERNAME]="required"
  [CF_DOMAIN]="optional"
  [BOSH_ALIAS]="required"
  [BOSH_IP]="required"
)

declare -A genesis_defaults=( 
  [BOSH_CLIENT]="admin"
#  [CF_API]="safe get secret/exodus/\${BASE_ENV}/cf:api_url"
#  [CF_API,type]="command"
  [CF_ORG]="system"
  [CF_SPACE]="dev" 
  [CF_USERNAME]="admin"
  [BOSH_ALIAS]="\${BASE_ENV}"
  [BOSH_IP]="safe get secret/exodus/\${BASE_ENV}/bosh:url"
  [BOSH_IP,type]="command"
)

declare -A pcf_vault_defaults=( 
  [BOSH_CLIENT]="admin"
  [CF_DOMAIN]=""
  [CF_API]="https://api.\${CF_DOMAIN}"
  [CF_ORG]="system"
  [CF_SPACE]="dev" 
  [CF_USERNAME]="admin"
  [CF_DOMAIN]="optional"
)

declare -A custom_variables=(
  [CF_PASSWORD]="VAULT_CF_PASSWORD_PATH"
  [BOSH_CA_CERT]="VAULT_BOSH_CA_CERT_PATH"
  [BOSH_CLIENT_SECRET]="VAULT_BOSH_CLIENT_SECRET_PATH"
)

declare -A custom_genesis_paths=(
  [CF_API]="secret/exodus/\${BASE_ENV}/cf:api_url"
  [CF_PASSWORD]="\${VAULT_PATH}/cf/admin_user:password"
  [CF_SKIP_SSL_VALIDATION]="secret/exodus/\${BASE_ENV}/cf:self-signed"
  [BOSH_CA_CERT]="\${VAULT_PATH}/bosh/ssl/ca:certificate"
  [BOSH_CLIENT_SECRET]="\${VAULT_PATH}/bosh/users/admin:password"
)

#PCF_with_Vault
declare -A custom_pcf_vault_paths=(
  [CF_PASSWORD]="\${VAULT_PATH}/cf/\${BASE_ENV}/password"
  [BOSH_CA_CERT]="\${VAULT_PATH}/bosh/\${BASE_ENV}/BOSH_CA_CERT"
  [BOSH_CLIENT_SECRET]="\${VAULT_PATH}/bosh/\${BASE_ENV}/BOSH_CLIENT_SECRET"
) 

set_variable() {
    declare base_variable=${1:?set_variable() - no environment variable name given   $(caller 0)}
    declare display_name=${2:-${base_variable}}
    declare required=${variables[${base_variable}]}
    declare base_type=${BASE_TYPE,,}
    declare -nl defaults="${base_type}_defaults"
    declare value
    declare -a array_value

    if [[ -z ${required} ]]; then
        # TODO Do we need custom error messages?
        echo "${display_name} is not defined in the variables table" >&2
        return 2
    fi

    [[ ${!base_variable} == "replace-me" ]] && {
      declare -gx ${base_variable}=""
      echo "DEBUG: clearing ${base_variable}"
    }

    # look in environment

    if [[ -n "${!base_variable:+"has value"}" ]]
    then
      return 0
    else
      echo "DEBUG: ${display_name} has no value or is empty" >&2
    fi

    # look in custom path

    if [[ -n "${custom_variables[${base_variable}]}:+"has_custom_path"}" ]]
    then
      indirect_variable=${custom_variables[${base_variable}]}
      declare  -nl custom_paths="custom_${base_type}_paths"
      # TODO Can we test if nameref variable reference exists
      declare indirect_path=${custom_paths[${base_variable}]}

      echo "DEBUG: indirect_variable ${indirect_variable}"
      echo "DEBUG: indirect_path ${indirect_path}"

      if [[ -n "${indirect_variable}" && -n "${!indirect_variable}" && "${!indirect_variable}" != "replace-me"  ]]
      then
        declare -a "array_value=("safe" "get" ${!indirect_variable})"
        value=$(${array_value[@]})
        declare -gx "${base_variable}=${value}"
        return 0
      elif [[ -n "${indirect_path}" ]]
      then
        declare -a "array_value=("safe" "get" ${indirect_path})"
        value=$(${array_value[@]})
        declare -gx "${base_variable}=${value}"
        return 0
      else
        echo "DEBUG: No ${BASE_TYPE} paths found" >&2
      fi
    else
      echo "DEBUG: ${display_name} has no custom paths" >&2
    fi

    # deal with default values

    [[ -z "${defaults[${base_variable}]+has_value}" ]] && {
      [[ ${required} == "optional" ]] && return 0
      [[ ${required} == "required" ]] && {
        error "${display_name} is required to be given or configured"
      }
      return 1
      
    }
    declare -a "array_value=(${defaults[${base_variable}]})"
    value="${array_value[@]}"
    [[ "${defaults[${base_variable},type]}" == "command" ]] && value=$(${value})
    declare -gx "${base_variable}=${value[@]}"
    return 0
  }

setup_environment() {
  declare -i ret_code=0

  # read in configuration variables, when the file exits
  # it will not exist in piplines that run containers for example.
  if [[ ! "" == "$USE_ENV" ]] ;
  then
    if [[ -s "config.${USE_ENV}.env" ]]
    then
      source "config.${USE_ENV}.env"
      echo "DEBUG: Sourcing config.${USE_ENV}.env" >&2
    else
      echo "USE_ENV set to '${USE_ENV}' but config.${USE_ENV}.env not found"
    fi
  else
    [[ -s "config.env" ]] && source "config.env"
  fi

  : ${BASE_TYPE:?"BASE_TYPE must be set to a value"}
  : ${BASE_ENV:?"BASE_ENV must be set to a value"}

  step "Setting up the environment"
  set_variable BOSH_ALIAS             || ret_code=$?
  set_variable BOSH_CA_CERT           || ret_code=$?
  set_variable BOSH_CLIENT            || ret_code=$?
  set_variable BOSH_CLIENT_SECRET     || ret_code=$?
  set_variable BOSH_IP                || ret_code=$?
  set_variable CF_DOMAIN              || ret_code=$?
  set_variable CF_API                 || ret_code=$?
  set_variable CF_SKIP_SSL_VALIDATION || ret_code=$?
  set_variable CF_ORG                 || ret_code=$?
  set_variable CF_SPACE               || ret_code=$?
  set_variable CF_PASSWORD            || ret_code=$?
  set_variable CF_USERNAME            || ret_code=$?

  export | grep -E "CF_|BOSH_|LH_|VAULT_" | awk '{ print"DEBUG: "  $0; }'
  echo "DEBUG: setup_environment() rc_code $ret_code"
  return $ret_code
}

add_path_if_not_exists() {
    declare test_path=${1:?add_path_if_not_exists() - no directory given   $(caller 0)}
    shift
    if [[ ":$PATH:" != *":${test_path}:"* ]]; then
        ls -id "${test_path}" | read path_inode rest
        for inode in $@; do
            if [[ "${path_inode}" == "${inode}" ]]; then
                reutn 0
            fi
        done
        PATH="${test_path}:$PATH"
        echo ${path_inode}
    else
        ls -id "${test_path}" | read path_inode rest
        echo ${path_inode}
    fi
    return 0
}

need_command() {
  declare cmd=${1:?need_command() - no command name given   $(caller 0)}

  if [[ ! -x "$(command -v $cmd)" ]]; then
    echo "The ${cmd} is not found in your PATH.  Please install and update"
    echo "your PATH before proceeding."
    return 1
  fi
  return 0
}

extract_version() {
  declare line=${1:?"extract_version() Missing search string $(caller 0)"}
  [[ "${line}" =~ ([[:digit:]]+(\.[[:digit:]]+){1,2}) ]]
}

is_version_ok() {
  declare minimum=${1:?"compare_version() Missing minimum version $(caller 0)"}
  declare version=${2:?"compare_version() Missing compare version $(caller 0)"}
  IFS=. read -a minver <<< ${minimum}
  IFS=. read -a cmpver <<< ${version}
  (( ${minver[0]:-0} < ${cmpver[0]:-0} )) && return 0
  (( ${minver[0]:-0} > ${cmpver[0]:-0} )) && return 1
  (( ${minver[1]:-0} < ${cmpver[1]:-0} )) && return 0
  (( ${minver[1]:-0} > ${cmpver[1]:-0} )) && return 1
  (( ${minver[2]:-0} < ${cmpver[2]:-0} )) && return 0
  (( ${minver[2]:-0} > ${cmpver[2]:-0} )) && return 1
  return 0
}

has_minimum_program_version() {
  declare program="${1:?has_minimum_program_version() Missing program name $(caller 0)}"
  declare minimum="${2:?compare_version() Missing minimum version $(caller 0)}"
  declare version="${3:?compare_version() Missing compare version $(caller 0)}"

  if extract_version "${version}"
  then
    declare progver="${BASH_REMATCH[1]}"
    if ! is_version_ok "${minimum}" "${progver}"
    then
      echo "You need to upgrade ${program} from version ${progver} to at least version ${minimum}" 
      return 1
    fi
  else
    echo "Unable to extract version for ${program}" 
    return 1
  fi
  return 0
}

find_included_path() {
  test_path="$1"
  if [[ -f "${USE_ENV}/tests/${test_path}" ]]; then
    echo "${USE_ENV}/tests/${test_path}"
  elif [[ -f "tests/${test_path}" ]]; then
    echo "tests/${test_path}"
  elif [[ -f "${LH_DIRECTORY}/templates/tests/${test_path}" ]]; then
    echo "${LH_DIRECTORY}/templates/tests/${test_path}"
  else
    warn "Test '${test_path}' does not exist; skipping."
    return 1
  fi
  return 0
}

find_test_path() {
  test_path="$1"
  if [[ -x "${USE_ENV}/tests/${test_path}" ]]; then
    echo "${USE_ENV}/tests/${test_path}"
  elif [[ -x "tests/${test_path}" ]]; then
    echo "tests/${test_path}"
  elif [[ -x "${LH_DIRECTORY}/templates/tests/${test_path}" ]]; then
    echo "${LH_DIRECTORY}/templates/tests/${test_path}"
  else
    warn "Test '${test_path}' does not exist or is not an executable; skipping."
    return 1
  fi
  return 0
}

has_test_requires_line() {
    grep -m 20 -E '^[[:blank:]]*#[[:blank:]]*lh_test_requires([[:blank:]]+[[:alnum:]_-]+)+[[:blank:]]*$' $@
}

component_test() {
  declare component="${1:?component_test() - Missing group argument   $(caller 0)}"

  step "Running ${component} tests."

  declare testcase test_file test_path

  declare included_path=$(find_included_path ${component}/included)
  if [[ $? -ne 0 ]]; then
    warn "${included_path}"
    return 1
  fi

  echo Using included path  ${included_path}

  while read testcase
  do
    test_file=$(basename "${testcase}")
    test_path=$(find_test_path "${component}/${test_file}")
    if [[ $? -eq 0 ]]; then
      step "Executing ${test_path}"
      . ${test_path}
    else
      step "Executing ${component}/${test_file}"
      echo ${test_path}
    fi
  done <"${included_path}"
  return 0
}

do_test() {
  (( $# == 0 )) && set -- bosh cf uaa
  while [[ $# -gt 0 ]]; do
    case "$1" in
      cf|bosh|uaa)
        component_test "${1}"
        ;;
      *)
        echo "Unrecognized argument: '${1}'"
        test_usage
        ;;
    esac
    shift
  done
}

do_run() {
  skip_login_arg_passed $@
  skip_login=$?

  # if no args are passed, only the skip login is passed, or the help arg is passed
  if [[ $# -lt 1 ]] || [[ $# -lt 2 && "$skip_login" == "0" ]]; then
    run_usage
  fi
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -s) # already captured so ignore
        shift
        continue
        ;;
      *)
        echo "Running test $1"
        run_individual_test "$1"
        ;;
    esac
    shift
  done
  [[ "${skip_login}" -ne 0 ]] && logout
}

help_arg_passed() {
  for i in "${@}"
  do
    [[ "${i}" == "-h" || "${i}" == "--help" || "${i}" == "help" ]] && return 0
  done
  return 1
}

skip_login_arg_passed() {
  for i in "${@}"; do
    [[ "${i}" == "-s" ]] && return 0
  done
  return 1
}

bosh_login() {
  step "Logging into bosh."

  # obtain the bosh CA cert, place in a temp folder, to store in BOSH_CA_CERT.
  mkdir -p /tmp/lh_certs.$$
  local _tmp_file=/tmp/lh_certs.$$/bosh-ssl.crt

  info "Storing the BOSH_CA_CERT in the temp file ${_tmp_file}"

  echo -e -n "${BOSH_CA_CERT}\n" > ${_tmp_file}

  # Create an alias
  info "Creating an environment alias for ${BOSH_ALIAS} to ${BOSH_IP} with ca-crt ${_tmp_file}"

  BOSH_CA_CERT=${_tmp_file} BOSH_CLIENT=${BOSH_CLIENT} BOSH_CLIENT_SECRET=${BOSH_CLIENT_SECRET}  bosh alias-env ${BOSH_ALIAS} -e ${BOSH_IP}

  info "Logging into the BOSH Alias ${BOSH_ALIAS}"

  BOSH_CA_CERT=${_tmp_file} BOSH_CLIENT=${BOSH_CLIENT} BOSH_CLIENT_SECRET=${BOSH_CLIENT_SECRET}  bosh login -e ${BOSH_ALIAS}
  # printf "%s\n%s\n" ${BOSH_CLIENT} ${BOSH_CLIENT_SECRET} | (BOSH_CA_CERT=${_tmp_file} BOSH_CLIENT= BOSH_CLIENT_SECRET=  bosh login -e ${BOSH_IP})

}

bosh_logout() {
  step "Log out of BOSH."

  info "Logging out of BOSH Environment ${BOSH_ALIAS}"

  bosh logout -e ${BOSH_ALIAS}

  # remove the cert we've got, in case we're going to target a new director
  rm -rf /tmp/lh_certs.*
}

bosh_tests() {
  step "Running BOSH tests."

  . ${USE_ENV}/tests/bosh/included
}

cf_login() {
  step "Logging into cf."

  declare skip_ssl_flag="--skip-ssl-validation"

  info "Setting cf api to ${CF_API}"

  [[ "${CF_SKIP_SSL_VALIDATION}" == "1" ]] || skip_ssl_flag=""
  cf api ${skip_ssl_flag} "${CF_API}" 

  info "Authenticating to CF as user ${CF_USERNAME}"

  CF_USERNAME="${CF_USERNAME}" CF_PASSWORD="${CF_PASSWORD}" cf auth

  info "Targeting org ${CF_ORG} and space ${CF_ORG}"

  cf target -o "${CF_ORG}" -s "${CF_SPACE}"
}

cf_logout() {
  step "Logged out of cf."

  cf logout

  cf api --unset
}

cf_tests() {
  step "Running CF tests."

  . ${USE_ENV}/tests/cf/included
}

check_safe() {
  step "Checking vault connnection."

  safe get secret/handshake > /dev/null
  if [[ $? > 0 ]]; then
    echo "There was an error checking safe.  Please ensure your VAULT_ADDR and VAULT_TOKEN are correct."
    return 1
  fi
  echo -e "\nOK\n"
}

# loop through the list of required CLI software.

declare -A tools=(
  [jq]="1.5"
  [jq,command]="jq --version"
  [vault]="0.9.0"
  [vault,command]="vault --version"
  [cf]="6.38"
  [cf,command]="cf --version"
  [safe]="0.9.9"
  [safe,command]="safe --version"
)

check_dependencies() {
  local check_list=${1:-"interactive"}
  local tool_check_list="jq cf bosh safe uaa bash vault"
  local -i ret_code=0

  [[ "${check_list}" == "repipe" ]] && tool_check_list="jq spruce fly vault"

  step "Checking software dependencies."

  for cmd in ${tool_check_list}
  do
    need_command "${cmd}" || ret_code=$?
  done

  (( ret_code > 0 )) && exit $ret_code

  for cmd in ${tool_check_list}
  do
    [[ -n "${tools[${cmd}]:+check_version}" ]] && {
      local version="${tools[${cmd}]}" 
      local cmd="${tools[${cmd},command]}" 
      has_minimum_program_version "${cmd}" "${version}" "$(${cmd} 2>&1)" || ret_code=$?
  }
  done

  (( ret_code == 0 )) && echo -e "\nOK\n"
  return $ret_code
}

safe_login() {
  if [[ "SKIP" == "$VAULT_TOKEN" ]]
  then
    if check_safe
    then
      echo "Already logged into   Vault. Skipping Vault login"
    else
      echo "Please login to safe or set the VAULT_TOKEN"
      exit 1
    fi
  else
    step "Logging into safe."
    if [[ $VAULT_ADDR == +("replace-me"|'') ]]; then 
       echo "Please configure VAULT_ADDR in your configure file "
       exit 1
     fi
     if [[ $VAULT_ALIAS == +("replace-me"|'') ]]; then 
        echo  "Please configure VAULT_ALIAS in your configure file"
        exit
     fi
     safe -k target ${VAULT_ADDR} ${VAULT_ALIAS}
     echo "$VAULT_TOKEN" | safe auth ${SAFE_AUTH}
     if check_safe
     then
         echo "Logged in Vault successfully"
     else
         exit 1
     fi
  fi
}

safe_logout() {
  if [[ "SKIP" != "$VAULT_TOKEN" ]]
  then
    step "Logged out of safe."

    safe target delete ${VAULT_ALIAS}
  fi
}

uaa_login() {
  step "Logging into UAA."

  # Environment Variables
  UAA_USER="admin"
  UAA_PASSWORD=""
  UAA_ADDR=""
  if safe exists "${VAULT_PATH}/cf/uaa/client_secrets:admin_client"; then
    UAA_PASSWORD=$(safe get "${VAULT_PATH}/cf/uaa/client_secrets:admin_client")
  fi
  if safe exists "secret/exodus/${BASE_ENV}/cf:uaa_url"; then
    UAA_ADDR=$(safe get "secret/exodus/${BASE_ENV}/cf:uaa_url")
  fi
  # Pull the UAA Address from Cloud Foundry if not explicitly set
  if [[ ! "" == "$UAA_ADDR" ]]
  then
    echo "Using UAA from Vault: ${UAA_ADDR}"
  else
    # CF_API="$( safe get secret/exodus/${BASE_ENV}/cf:api_url )"
    echo "CFAPI: ${CF_API}"

    UAA_ADDR=$(curl -k ${CF_API} |jq -r '.links.uaa.href')
    echo "Pulled UAA from API: ${UAA_ADDR}"
  fi

  # Set the target UAA
  uaa target ${UAA_ADDR} --skip-ssl-validation
  # Authenticate
  uaa get-client-credentials-token ${UAA_USER} -s ${UAA_PASSWORD}
}

uaa_logout() {
  step "Logged out of UAA."

  # logout not implemented in cli, so clear UAA profile
  rm -rf ~/.uaa/*
}

# top level commands

check() {
  declare rc=0
  (( $# == 0 )) && set -- dependencies safe
  while [[ $# -gt 0 ]]; do
    case "$1" in
      dependencies)
        check_dependencies || rc=$?
        ;;
      safe)
        check_safe || rc=$?
        ;;
      *)
        echo "Unrecognized argument: '${1}'"
        check_usage
        ;;
    esac
    shift
  done
  return $rc
}

do_login() {
  (( $# == 0 )) && set -- safe bosh cf uaa
  while (( $# > 0 )); do
    case "$1" in
      bosh|cf|safe|uaa)
        ${1}_login
        ;;
      *)
        echo "Unrecognized argument: '${1}'"
        login_usage
        ;;
    esac
    shift
  done

    #TODO: ensure that if an error raised in previous functions
    #they will break before this step.
    step "Logged into all systems."
  }

do_logout() {
  (( $# == 0 )) && set -- uaa cf bosh safe
  while [[ $# -gt 0 ]]; do
    case "$1" in           
      bosh|cf|safe|uaa)
        ${1}_logout
        ;;
      *)
        echo "Unrecognized argument: '${1}'"
        logout_usage
        ;;
    esac
    shift
  done

    #TODO: ensure that if an error raised in previous functions
    #they will break before this step.
    step "Logged out of all systems."
  }

run_individual_test() {
  declare test_file test_path
  test_file="${1:?run_individual_test() - Missing quota/plan argument   $(caller 0)}"
  [[ "${skip_login}" -ne 0 ]] && login
  test_path=$(find_test_path "${test_file}")
  if [[ $? -eq 0 ]]; then
    step "Executing ${test_path}"
    . ${test_path}
  else
    step "Executing ${test_file}"
    echo ${test_path}
  fi
}

do_repipe() {
  local ret_code=0

  check_dependencies repipe

  step "Generating pipeline files."

  pushd .
  cd templates/ci
  cat << EOF > settings.yml
---
meta:
  envname: ${BASE_ENV}
  target:  ${CONCOURSE_TARGET}
  url:     ${CONCOURSE_URL}
  bosh:
    ip: "${BOSH_IP}"

  vault:
    url:   ${VAULT_ADDR}
    token: (( vault "secret/pipeline/vault:token" ))
    path:  (( concat "secret/" meta.envname ))  # Or override as needed

  github:
    owner:  ${GITHUB_OWNER}
    repo:   lighthouse
    branch: master
    private_key:  (( vault "secret/pipelines/shared/github/genesis-bot:private" ))

EOF

. ${LH_DIRECTORY}/templates/ci/repipe
popd
}

# TODO Do we extend init to create more than one environment at a time
do_init() {
  (( $# <  1 )) && init_usage
  new_directory="$1"
  echo "Creating directory ${new_directory}"
  mkdir ${new_directory} || return $?
  cp -Riv ${LH_DIRECTORY}/templates/data ${new_directory}/ || return $?
  #    cp -Riv ${LH_DIRECTORY}/templates/tests ${new_directory}/
  return 0
}

new_env() {
  if [[ $# -lt 1 ]] ; then new_usage ; fi
  local LH_ENV_NAME="$1"

  if [[ -e "config.${LH_ENV_NAME}.env" ]]
  then
    echo "File config.${LH_ENV_NAME}.env already exists"
  else
    echo "Adding Environment '${LH_ENV_NAME}'"
    cat << EOF > config.${LH_ENV_NAME}.env
# the root path in vault to the secrets stored in vault.
# use VAULT_SKIP_VERIFY  = true for insecure, non-tls environments.
# use CF_SKIP_SSL_VALIDATION  = true for insecure, non-tls environments.
# providing the VAULT_TOKEN here allows you to sign into lighthouse without prompts.

export BASE_ENV="${LH_ENV_NAME}"                # Change name to config file if copied
export BASE_TYPE="\${BASE_TYPE:="Genesis"}"      # Can be:
                                                    #      Genesis
                                                    #      "PCF_Vault"
                                                    #      "OCF_Vault"
                                                    #      "PCF_OM"

export VAULT_TOKEN="\${VAULT_TOKEN:="replace-me"}"   # Set to "SKIP" to skip auto-login
export VAULT_PATH="\${VAULT_PATH:="replace-me"}"
export VAULT_ADDR="\${VAULT_ADDR:="replace-me"}"
export VAULT_ALIAS="\${VAULT_ALIAS:="replace-me"}"
export VAULT_SKIP_VERIFY="\${VAULT_SKIP_VERIFY:="true"}"  # true or false
export SAFE_AUTH="\${SAFE_AUTH:="token"}"              # can be token or github

export CONCOURSE_TARGET="\${CONCOURSE_TARGET:="replace-me"}"
export CONCOURSE_URL="\${CONCOURSE_URL:="replace-me"}"
export GITHUB_OWNER="\${GITHUB_OWNER:="starkandwayne"}"  # replace if you are using your own fork

# environment variables for BOSH
# can be used to override default vault values

export BOSH_IP="\${BOSH_IP:="replace-me"}"
export BOSH_ALIAS="\${BOSH_ALIAS:="replace-me"}"

# environment variables for Cloud Foundry
# can be used to override default vault values

# export CF_DIAL_TIMEOUT="\${CF_DIAL_TIMEOUT:=180}" # Uncomment if you need for login/usage
export CF_USERNAME="\${CF_USERNAME:="admin"}"
export CF_DOMAIN="\${CF_DOMAIN:="replace-me"}" # OPTIONAL
export CF_API="\${CF_API:="replace-me"}"
export CF_ORG="\${CF_ORG:="replace-me"}"
export CF_SPACE="\${CF_SPACE:="replace-me"}"
export BOSH_CLIENT="\${BOSH_CLIENT:="replace-me"}"
# 
export CF_SKIP_SSL_VALIDATION="\${CF_SKIP_SSL_VALIDATION:="replace-me"}"
export VAULT_CF_PASSWORD_PATH="\${VAULT_CF_PASSWORD_PATH:="replace-me"}" # example: secret/.....
export VAULT_BOSH_CA_CERT_PATH="\${VAULT_BOSH_CA_CERT_PATH:="replace-me"}" # example: secret/.....
export VAULT_BOSH_CLIENT_SECRET_PATH="\${VAULT_BOSH_CLIENT_SECRET_PATH:="replace-me"}" # example: secret/.....

EOF
  fi

  echo "Creating paths to ${LH_ENV_NAME}/data/ and ${LH_ENV_NAME}/tests/"
  mkdir -p ${LH_ENV_NAME}/data/cf
  mkdir -p ${LH_ENV_NAME}/data/bosh
  mkdir -p ${LH_ENV_NAME}/data/uaa
  mkdir -p ${LH_ENV_NAME}/tests/cf
  mkdir -p ${LH_ENV_NAME}/tests/bosh
  mkdir -p ${LH_ENV_NAME}/tests/uaa
  mkdir -p ${LH_ENV_NAME}/lib

  exit 0
}

#TODO figure out if we want a more complicated setting
enable_lh_debug() {
  export LH_DEBUG=
}

#TODO figure out if we want a more complicated setting
enable_lh_trace() {
  export LH_TRACE=
}

# teach a man to CLI

check_usage() {
  declare rc=${1:-1}
  declare return_by=${2:-"exit"}
  echo "Usage: $0 check"
  echo "TODO"
  echo "TODO"
  echo "TODO"
  ${return_by} ${rc}
}

help_usage() {
  declare rc=${1:-1}
  declare return_by=${2:-"exit"}
  echo "Usage: $0 help"
  echo "TODO"
  echo "TODO"
  echo "TODO"
  ${return_by} ${rc}
}

init_usage() {
  declare rc=${1:-1}
  declare return_by=${2:-"exit"}
  echo "Usage: ${0} init"
  echo "  Create a directory and copy over the data files to the default"
  ${return_by} ${rc}
}

login_usage() {
  declare rc=${1:-1}
  declare return_by=${2:-"exit"}
  echo "Usage: $0 login"
  echo "TODO"
  echo "TODO"
  echo "TODO"
  ${return_by} ${rc}
}

logout_usage(){
  declare rc=${1:-1}
  declare return_by=${2:-"exit"}
  echo "Usage: $0 logout"
  echo "TODO"
  echo "TODO"
  echo "TODO"
  ${return_by} ${rc}
}

new_usage() {
  declare rc=${1:-1}
  declare return_by=${2:-"exit"}
  echo "Usage: $0 new environment"
  echo "  Create a config.environment.env and copy over the data files to the environment subdirectory"
  ${return_by} ${rc}
}

repipe_usage() {
  declare rc=${1:-1}
  declare return_by=${2:-"exit"}
  echo "Usage: $0 repipe"
  echo "TODO"
  echo "TODO"
  echo "TODO"
  ${return_by} ${rc}
}

run_usage() {
  declare rc=${1:-1}
  declare return_by=${2:-"exit"}
  echo "Usage: $0 run [options] path1 [path2] [path3] ... [pathN]"
  echo "  Takes one or more paths to test scripts and runs them if possible."
  echo "  The path will be 'group/test.sh' such as 'cf/orgs.sh'"
  echo "  Will login to each component unless instructed otherwise."
  echo "  Options:"
  echo "    -s: skip login to bosh, cf, and uaa."
  ${return_by} ${rc}
}

test_usage() {
  declare rc=${1:-1}
  declare return_by=${2:-"exit"}
  echo "Usage: $0 test  environment"
  echo "  run all tests."
  echo "  test bosh: only the bosh tests."
  echo "    test cf: only cloud foundry tests."
  ${return_by} ${rc}
}

usage() {
  declare rc=${1:-1}
  declare return_by=${2:-"exit"}
  echo "Lighthouse, near friendly shores."
  echo "  check  -- check for dependencies or signed in."
  echo "  help   -- Get help on one or more commands"
  echo "  init   -- Create config directory for addding lighthouse environment"
  echo "  login  -- sign into vault with safe, then BOSH and CF with vault."
  echo "  logout -- logout of safe, BOSH and CF."
  echo "  new    -- Create config for lighthouse environment after init"
  echo "  repipe -- create pipeline for tests"
  echo "  run    -- run a specific test or set of tests."
  echo "  test   -- run all tests."
  ${return_by} ${rc}
}

do_help_cmd() {
  local rc=0 func
  (( $# == 0 )) && usage 0
  for cmd in "$@"
  do
    func=${cmd}_usage
    if [[ $(type -t ${func}) != "function" ]]
    then
      echo "${cmd}: no such command exists"
      rc=1
    fi
  done

  (( rc == 1 )) && usage

  declare -i i=0
  for cmd in "$@"
  do
    (( i++ != 0 )) && echo
    ${cmd}_usage 0 return
  done
  exit "${rc}"
}

perform_action() {
  local setup=$1
  local action=$2
  local action_usage=$3
  shift;shift;shift
  if help_arg_passed "$@"; then
    ${action_usage} 0
  fi
  (( setup > 0 )) && initialize_environment
  (( setup > 1 )) && setup_environment
  ${action} "$@"
  exit $?
}


# End of function definition section

(( $# > 0 )) || usage

# process commands that do require variable initialization

while (( $# > 0 ))
do
  case "$1" in
    -d)
      shift
      if (( $# > 1 )); then 
        enable_lh_debug "$1"; shift
      else
        echo "Missing -d argument or no command to run"
        usage
      fi
      ;;
    -t)
      shift
      if (( $# > 1 )); then 
        enable_lh_trace "$1"; shift
      else
        echo "Missing -t argument or no command to run"
        usage
      fi
      ;;
    help|-h|--help)
      shift
      perform_action 0 do_help_cmd help_usage "$@"
      ;;
    new)
      shift
      perform_action 0 new_env new_usage "$@"
      ;;
    check)
      shift
      perform_action 0 check check_usage "$@"
      ;;
    init)
      shift
      perform_action 1 do_init init_usage "$@"
      ;;
    login)
      shift
      perform_action 2 do_login login_usage "$@"
      ;;
    logout)
      shift
      perform_action 2 do_logout logout_usage "$@"
      ;;
    repipe)
      shift
      perform_action 2 do_repipe repipe_usage "$@"
      ;;
    test)
      shift
      perform_action 2 do_test test_usage "$@"
      ;;
    run)
      shift
      perform_action 2 do_run run_usage "$@"
      ;;
    *)
      echo "Invalid command '$1'"
      usage
      ;;
  esac
done

exit $?
